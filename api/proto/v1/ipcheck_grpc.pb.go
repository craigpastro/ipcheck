// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpCheckClient is the client API for IpCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpCheckClient interface {
	InBlocklist(ctx context.Context, in *InBlocklistRequest, opts ...grpc.CallOption) (*InBlocklistResponse, error)
	InitBlocklists(ctx context.Context, in *InitBlocklistsRequest, opts ...grpc.CallOption) (*InitBlocklistsResponse, error)
}

type ipCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewIpCheckClient(cc grpc.ClientConnInterface) IpCheckClient {
	return &ipCheckClient{cc}
}

func (c *ipCheckClient) InBlocklist(ctx context.Context, in *InBlocklistRequest, opts ...grpc.CallOption) (*InBlocklistResponse, error) {
	out := new(InBlocklistResponse)
	err := c.cc.Invoke(ctx, "/api.proto.v1.IpCheck/InBlocklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipCheckClient) InitBlocklists(ctx context.Context, in *InitBlocklistsRequest, opts ...grpc.CallOption) (*InitBlocklistsResponse, error) {
	out := new(InitBlocklistsResponse)
	err := c.cc.Invoke(ctx, "/api.proto.v1.IpCheck/InitBlocklists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpCheckServer is the server API for IpCheck service.
// All implementations must embed UnimplementedIpCheckServer
// for forward compatibility
type IpCheckServer interface {
	InBlocklist(context.Context, *InBlocklistRequest) (*InBlocklistResponse, error)
	InitBlocklists(context.Context, *InitBlocklistsRequest) (*InitBlocklistsResponse, error)
	mustEmbedUnimplementedIpCheckServer()
}

// UnimplementedIpCheckServer must be embedded to have forward compatible implementations.
type UnimplementedIpCheckServer struct {
}

func (UnimplementedIpCheckServer) InBlocklist(context.Context, *InBlocklistRequest) (*InBlocklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InBlocklist not implemented")
}
func (UnimplementedIpCheckServer) InitBlocklists(context.Context, *InitBlocklistsRequest) (*InitBlocklistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitBlocklists not implemented")
}
func (UnimplementedIpCheckServer) mustEmbedUnimplementedIpCheckServer() {}

// UnsafeIpCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpCheckServer will
// result in compilation errors.
type UnsafeIpCheckServer interface {
	mustEmbedUnimplementedIpCheckServer()
}

func RegisterIpCheckServer(s grpc.ServiceRegistrar, srv IpCheckServer) {
	s.RegisterService(&IpCheck_ServiceDesc, srv)
}

func _IpCheck_InBlocklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InBlocklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpCheckServer).InBlocklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.v1.IpCheck/InBlocklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpCheckServer).InBlocklist(ctx, req.(*InBlocklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpCheck_InitBlocklists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitBlocklistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpCheckServer).InitBlocklists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.v1.IpCheck/InitBlocklists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpCheckServer).InitBlocklists(ctx, req.(*InitBlocklistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpCheck_ServiceDesc is the grpc.ServiceDesc for IpCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.v1.IpCheck",
	HandlerType: (*IpCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InBlocklist",
			Handler:    _IpCheck_InBlocklist_Handler,
		},
		{
			MethodName: "InitBlocklists",
			Handler:    _IpCheck_InitBlocklists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/ipcheck.proto",
}
